/**************************************************************************
 * L3Informatique						Module SYR1
 * 			TP de programmation en C :
 *		         Test de listes chaînees
 *
 * Groupe 	: 2.1
 * Nom Prenom 1 : Labanca Hector
 * Nom Prenom 2 : Bardou Augustin
 *
 **************************************************************************/


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<termios.h>
#include<unistd.h>
#include"list.h"

list_elem_t* la_liste = NULL;

void print_list(list_elem_t* p_list) {
  list_elem_t *pl = p_list;
  printf("La liste contient %d element(s)\n",list_size(p_list));
  if (pl!=NULL) {
    while(pl!=NULL) {
      printf("[%d]",pl->value);
      pl=pl->next;
      if (pl!=NULL) {
	printf("->");
      }
    }
  }
}

extern int nb_malloc;

char menu[] =
  "\n Programme de test de listes\n"\
  "  't/q' : ajout d'un element en tête/queue de liste\n"\
  "  'f'   : recherche du ième element de la liste\n"\
  "  's'   : suppression d'un element de la liste\n"\
  "  'r'   : renverser l'ordre des elements de la liste\n"\
  "  'x'   : quitter le programme\n"\
  " Quel est votre choix ?";

int main(int argc, char **argv) {
  int choix=0;
  int value=0;

  printf("%s",menu);
  fflush(stdout);

  while(1) {
    fflush(stdin);
    choix = getchar();
    printf("\n");

    switch(choix) {
    case 'T' :
    case 't' :
      printf("Valeur du nouvel element ? ");
      scanf("%d",&value);
      if (insert_head(&la_liste,value)!=0) {
	printf("Erreur : impossible d'ajouter l'element %d\n",value);
      };
      break;

    case 'Q' :
    case 'q' :
      printf("Valeur du nouvel element ? ");
      scanf("%d",&value);
      if (insert_tail(&la_liste,value)!=0) {
		printf("Erreur : impossible d'ajouter l'element %d\n",value);
      };
      break;


    case 'F' :
    case 'f' :
		printf("Index de l'element a rechercher ? ");
		scanf("%d", &value);
		list_elem_t* result = find_element(la_liste, value);
		if(result != NULL)
			printf("La valeur de l'element numero %d est %d\n", value, result->value);
		else
			printf("Erreur, l'element numero %d n'existe pas\n", value);
      break;



    case 's' :
    case 'S' :
      printf("Valeur de l'element a supprimer ? ");
	  scanf("%d", &value);
	  if(remove_element(&la_liste, value) != 0)
		printf("Erreur, aucun element ne possede la valeur %d\n", value);
	  else
		printf("L'element de valeur %d a ete supprime avec succes\n", value);	
      break;


    case 'r' :
    case 'R' :
      printf("Renversement des elements de la liste.\n");
	  reverse_list(&la_liste);
      break;


    case 'x' :
    case 'X' :
      return 0;

    default:
      break;
    }
    print_list(la_liste);

    if (nb_malloc!=list_size(la_liste)) {
	printf("\nAttention : il y a une fuite memoire dans votre programme !\n");
	printf("la liste contient %d element, or il y a %d element vivant en memoire !\n",list_size(la_liste),nb_malloc);
    }
    getchar(); // pour consommer un RC et eviter un double affichage du menu !
    printf("%s\n",menu);
  }
  return 0;
}



